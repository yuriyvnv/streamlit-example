{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "665882fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "from food_extractor.food_model import FoodModel\n",
    "import pytesseract\n",
    "import io,os\n",
    "import pandas as pd\n",
    "\n",
    "from google.cloud import vision\n",
    "from google.cloud import vision_v1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7a3522da",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = FoodModel(\"chambliss/distilbert-for-food-extraction\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "74f538d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingredients\n",
      "1/2 pound ground beef\n",
      "3 cups chicken broth\n",
      "4 tablespoons butter, divided\n",
      "1/4 cup all-purpose flour\n",
      "3/4 cup chopped onion\n",
      "2 to 4 cups shredded Velveeta\n",
      "3/4 cup shredded carrots\n",
      "1-1/2 cups whole milk\n",
      "3/4 cup\n",
      "diced celery\n",
      "3/4 teaspoon salt\n",
      "1 teaspoon dried basil\n",
      "1/4 to 1/2 teaspoon pepper\n",
      "1 teaspoon dried parsley flakes\n",
      "1/4 cup sour cream\n",
      "1-3/4 pounds (about 4 cups) cubed peeled\n",
      "potatoes\n",
      "\n",
      "[{'Product': [], 'Ingredient': [{'text': 'ground beef', 'span': [22, 33], 'conf': 0.951024979352951}, {'text': 'chicken broth', 'span': [41, 54], 'conf': 0.994500974814097}, {'text': 'butter', 'span': [69, 75], 'conf': 0.9941260814666748}, {'text': 'flour', 'span': [105, 110], 'conf': 0.7373480796813965}, {'text': 'onion', 'span': [127, 132], 'conf': 0.9851657748222351}, {'text': 'Velveeta', 'span': [154, 162], 'conf': 0.8603788614273071}, {'text': 'carrots', 'span': [180, 187], 'conf': 0.9961046576499939}, {'text': 'whole', 'span': [199, 204], 'conf': 0.8856698870658875}, {'text': 'milk', 'span': [205, 209], 'conf': 0.7921940684318542}, {'text': 'celery', 'span': [224, 230], 'conf': 0.9906361301740011}, {'text': 'salt', 'span': [244, 248], 'conf': 0.8944306969642639}, {'text': 'basil', 'span': [266, 271], 'conf': 0.9882515072822571}, {'text': 'pepper', 'span': [292, 298], 'conf': 0.9463019371032715}, {'text': 'parsley flakes', 'span': [316, 330], 'conf': 0.8840960264205933}, {'text': 'sour cream', 'span': [339, 349], 'conf': 0.9937521517276764}, {'text': 'peeled', 'span': [384, 390], 'conf': 0.573172926902771}, {'text': 'potatoes', 'span': [391, 399], 'conf': 0.9804267883300781}]}]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/Users/yuriyperezhohin/Desktop/food-345217-eb439b2535cc.json\"\n",
    "\n",
    "\n",
    "client_options = {'api_endpoint': 'eu-vision.googleapis.com'}\n",
    "\n",
    "client = vision.ImageAnnotatorClient(client_options=client_options)\n",
    "\n",
    "# load image into memory\n",
    "with io.open(\"/Users/yuriyperezhohin/Desktop/image6.png\",\"rb\") as image_file:\n",
    "    file_content = image_file.read()\n",
    "# perform text detection from the image\n",
    "image_detail = vision.Image(content=file_content)\n",
    "response = client.document_text_detection(image=image_detail)\n",
    "# print text from the dcoment\n",
    "doctext = response.full_text_annotation.text\n",
    "print(doctext)\n",
    "print(model.extract_foods(doctext))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "aed98592",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n",
      "To disable this warning, you can either:\n",
      "\t- Avoid using `tokenizers` before the fork if possible\n",
      "\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n",
      "Collecting kivy\n",
      "  Downloading Kivy-2.1.0-cp38-cp38-macosx_10_9_universal2.whl (12.5 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.5/12.5 MB\u001b[0m \u001b[31m15.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: pygments in /Users/yuriyperezhohin/opt/anaconda3/envs/Programing/lib/python3.8/site-packages (from kivy) (2.10.0)\n",
      "Collecting Kivy-Garden>=0.1.4\n",
      "  Downloading Kivy_Garden-0.1.5-py3-none-any.whl (4.6 kB)\n",
      "Requirement already satisfied: docutils in /Users/yuriyperezhohin/opt/anaconda3/envs/Programing/lib/python3.8/site-packages (from kivy) (0.17.1)\n",
      "Requirement already satisfied: requests in /Users/yuriyperezhohin/opt/anaconda3/envs/Programing/lib/python3.8/site-packages (from Kivy-Garden>=0.1.4->kivy) (2.26.0)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/yuriyperezhohin/opt/anaconda3/envs/Programing/lib/python3.8/site-packages (from requests->Kivy-Garden>=0.1.4->kivy) (3.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/yuriyperezhohin/opt/anaconda3/envs/Programing/lib/python3.8/site-packages (from requests->Kivy-Garden>=0.1.4->kivy) (2021.10.8)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/yuriyperezhohin/opt/anaconda3/envs/Programing/lib/python3.8/site-packages (from requests->Kivy-Garden>=0.1.4->kivy) (1.26.7)\n",
      "Requirement already satisfied: charset-normalizer~=2.0.0 in /Users/yuriyperezhohin/opt/anaconda3/envs/Programing/lib/python3.8/site-packages (from requests->Kivy-Garden>=0.1.4->kivy) (2.0.6)\n",
      "Installing collected packages: Kivy-Garden, kivy\n",
      "Successfully installed Kivy-Garden-0.1.5 kivy-2.1.0\n"
     ]
    }
   ],
   "source": [
    "!pip install kivy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96765641",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[WARNING] [Config      ] Older configuration version detected (0 instead of 24)\n",
      "[WARNING] [Config      ] Upgrading configuration in progress.\n",
      "[INFO   ] [Logger      ] Record log in /Users/yuriyperezhohin/.kivy/logs/kivy_22-03-26_0.txt\n",
      "[INFO   ] [Kivy        ] v2.1.0\n",
      "[INFO   ] [Kivy        ] Installed at \"/Users/yuriyperezhohin/opt/anaconda3/envs/Programing/lib/python3.8/site-packages/kivy/__init__.py\"\n",
      "[INFO   ] [Python      ] v3.8.2 (default, Mar 26 2020, 10:43:30) \n",
      "[Clang 4.0.1 (tags/RELEASE_401/final)]\n",
      "[INFO   ] [Python      ] Interpreter at \"/Users/yuriyperezhohin/opt/anaconda3/envs/Programing/bin/python\"\n",
      "[INFO   ] [Logger      ] Purge log fired. Processing...\n",
      "[INFO   ] [Logger      ] Purge finished!\n",
      "[INFO   ] [Factory     ] 189 symbols loaded\n",
      "[INFO   ] [Image       ] Providers: img_tex, img_imageio, img_dds, img_sdl2, img_pil (img_ffpyplayer ignored)\n",
      "[INFO   ] [Window      ] Provider: sdl2\n",
      "[INFO   ] [GL          ] Using the \"OpenGL ES 2\" graphics system\n",
      "[INFO   ] [GL          ] Backend used <sdl2>\n",
      "[INFO   ] [GL          ] OpenGL version <b'2.1 Metal - 76.3'>\n",
      "[INFO   ] [GL          ] OpenGL vendor <b'Apple'>\n",
      "[INFO   ] [GL          ] OpenGL renderer <b'Apple M1'>\n",
      "[INFO   ] [GL          ] OpenGL parsed version: 2, 1\n",
      "[INFO   ] [GL          ] Shading version <b'1.20'>\n",
      "[INFO   ] [GL          ] Texture max size <16384>\n",
      "[INFO   ] [GL          ] Texture max units <16>\n",
      "[INFO   ] [Window      ] auto add sdl2 input provider\n",
      "[INFO   ] [Window      ] virtual keyboard not allowed, single mode, not docked\n",
      "[INFO   ] [Camera      ] Provider: avfoundation\n",
      "[INFO   ] [Text        ] Provider: sdl2\n",
      "[INFO   ] [Base        ] Start application main loop\n",
      "[INFO   ] [GL          ] NPOT texture support is available\n",
      "[INFO   ] [GL          ] BGRA texture support is available\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Captured\n",
      "Captured\n",
      "Captured\n",
      "Captured\n",
      "Captured\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Camera Example\n",
    "==============\n",
    "\n",
    "This example demonstrates a simple use of the camera. It shows a window with\n",
    "a buttoned labelled 'play' to turn the camera on and off. Note that\n",
    "not finding a camera, perhaps because gstreamer is not installed, will\n",
    "throw an exception during the kv language processing.\n",
    "\n",
    "'''\n",
    "\n",
    "# Uncomment these lines to see all the messages\n",
    "# from kivy.logger import Logger\n",
    "# import logging\n",
    "# Logger.setLevel(logging.TRACE)\n",
    "\n",
    "from kivy.app import App\n",
    "from kivy.lang import Builder\n",
    "from kivy.uix.boxlayout import BoxLayout\n",
    "import time\n",
    "Builder.load_string('''\n",
    "<CameraClick>:\n",
    "    orientation: 'vertical'\n",
    "    Camera:\n",
    "        id: camera\n",
    "        resolution: (680, 420)\n",
    "        play: False\n",
    "    ToggleButton:\n",
    "        text: 'Play'\n",
    "        on_press: camera.play = not camera.play\n",
    "        size_hint_y: None\n",
    "        height: '48dp'\n",
    "    Button:\n",
    "        text: 'Capture'\n",
    "        size_hint_y: None\n",
    "        height: '48dp'\n",
    "        on_press: root.capture()\n",
    "''')\n",
    "\n",
    "\n",
    "class CameraClick(BoxLayout):\n",
    "    def capture(self):\n",
    "        '''\n",
    "        Function to capture the images and give them the names\n",
    "        according to their captured time and date.\n",
    "        '''\n",
    "        camera = self.ids['camera']\n",
    "        timestr = time.strftime(\"%Y%m%d_%H%M%S\")\n",
    "        camera.export_to_png(\"IMG_{}.png\".format(timestr))\n",
    "        print(\"Captured\")\n",
    "\n",
    "\n",
    "class TestCamera(App):\n",
    "\n",
    "    def build(self):\n",
    "        return CameraClick()\n",
    "\n",
    "\n",
    "TestCamera().run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c83735a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2 \n",
    "\n",
    "key = cv2. waitKey(1)\n",
    "webcam = cv2.VideoCapture(0)\n",
    "while True:\n",
    "    try:\n",
    "        check, frame = webcam.read()\n",
    "        print(check) #prints true as long as the webcam is running\n",
    "        print(frame) #prints matrix values of each framecd \n",
    "        cv2.imshow(\"Capturing\", frame)\n",
    "        key = cv2.waitKey(1)\n",
    "        if key == ord('s'): \n",
    "            cv2.imwrite(filename='saved_img.jpg', img=frame)\n",
    "            webcam.release()\n",
    "            img_new = cv2.imread('saved_img.jpg', cv2.IMREAD_GRAYSCALE)\n",
    "            img_new = cv2.imshow(\"Captured Image\", img_new)\n",
    "            cv2.waitKey(1650)\n",
    "            cv2.destroyAllWindows()\n",
    "            print(\"Processing image...\")\n",
    "            img_ = cv2.imread('saved_img.jpg', cv2.IMREAD_ANYCOLOR)\n",
    "            print(\"Converting RGB image to grayscale...\")\n",
    "            gray = cv2.cvtColor(img_, cv2.COLOR_BGR2GRAY)\n",
    "            print(\"Converted RGB image to grayscale...\")\n",
    "            print(\"Resizing image to 28x28 scale...\")\n",
    "            img_ = cv2.resize(gray,(28,28))\n",
    "            print(\"Resized...\")\n",
    "            img_resized = cv2.imwrite(filename='saved_img-final.jpg', img=img_)\n",
    "            print(\"Image saved!\")\n",
    "        \n",
    "            break\n",
    "        elif key == ord('q'):\n",
    "            print(\"Turning off camera.\")\n",
    "            webcam.release()\n",
    "            print(\"Camera off.\")\n",
    "            print(\"Program ended.\")\n",
    "            cv2.destroyAllWindows()\n",
    "            break\n",
    "        \n",
    "    except(KeyboardInterrupt):\n",
    "        print(\"Turning off camera.\")\n",
    "        webcam.release()\n",
    "        print(\"Camera off.\")\n",
    "        print(\"Program ended.\")\n",
    "        cv2.destroyAllWindows()\n",
    "        break\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
